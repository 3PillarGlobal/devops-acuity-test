name: Create MySQL RDS with Terraform

permissions:
 id-token: write
 contents: read

on: 
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: Make a choice
        options:
        - create
        - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: GitHub_to_AWS_poc
        aws-region: us-east-1
        role-duration-seconds: 3600

    # - name: configure mysql
    #   uses: mirromutth/mysql-action@v1.1
    #   with:
    #     mysql root password: ${{ secrets.DEV_RDS_USER }}
    #     mysql password: ${{ secrets.DEV_RDS_PASS }}
    # - name: Install a SQL Server suite of tools
    #   uses: potatoqualitee/mssqlsuite@v1.7
    #   with:
    #     install: sqlengine, sqlclient, sqlpackage, localdb
    #     version: 2017
    #     sa-password: ${{ secrets.DEV_RDS_PASS }}

    # Install SQL Server client (e.g., FreeTDS) for connecting to the database
    - name: SQL Server
      run: |
        sudo apt-get install freetds-dev telnet -y

    - name: Sts GetCallerIdentity
      run: |
        aws sts get-caller-identity

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Initialize Terraform
      run: |
        cd enviroments/dev 
        terraform init

    - name: Deploy to Development Environment
      if: ${{ github.event.inputs.action == 'create' }}
      env:
        DB_USERNAME: ${{ secrets.DEV_RDS_USER }}
        SQLCMDPASSWORD: ${{ secrets.DEV_RDS_PASS }}
      run: |
        cd enviroments/dev
        terraform apply --auto-approve -var="admin_user=${DB_USERNAME}" -var="admin_pass=${SQLCMDPASSWORD}" 

    - name: Query/Insert
      env:
        SQLCMDPASSWORD: ${{ secrets.DEV_RDS_PASS }}
      run: |
        telnet myrdsinstance.cdgp1kzsstfl.us-east-1.rds.amazonaws.com 3306
        sqlcmd -U admin -S myrdsinstance.cdgp1kzsstfl.us-east-1.rds.amazonaws.com:3306 -i modules/rds/dump_db.sql

    - name: Destroy development Environment
      if: ${{ github.event.inputs.action == 'destroy' }}
      env:
        DB_USERNAME: ${{ secrets.DEV_RDS_USER }}
        SQLCMDPASSWORD: ${{ secrets.DEV_RDS_PASS }}
      run: |
        cd enviroments/dev
        terraform destroy --auto-approve -var="admin_user=${DB_USERNAME}" -var="admin_pass=${SQLCMDPASSWORD}" 